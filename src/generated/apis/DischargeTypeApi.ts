// tslint:disable
/**
 * Open Hospital API Documentation
 * Open Hospital API Documentation
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders } from '../runtime';
import type {
    DischargeTypeDTO,
} from '../models';

export interface DeleteDischargeTypeRequest {
    code: string;
}

export interface NewDischargeTypeRequest {
    dischargeTypeDTO: DischargeTypeDTO;
}

export interface UpdateDischargeTypeRequest {
    dischargeTypeDTO: DischargeTypeDTO;
}

/**
 * no description
 */
export class DischargeTypeApi extends BaseAPI {

    /**
     */
    deleteDischargeType({ code }: DeleteDischargeTypeRequest): Observable<boolean>
    deleteDischargeType({ code }: DeleteDischargeTypeRequest, opts?: OperationOpts): Observable<AjaxResponse<boolean>>
    deleteDischargeType({ code }: DeleteDischargeTypeRequest, opts?: OperationOpts): Observable<boolean | AjaxResponse<boolean>> {
        throwIfNullOrUndefined(code, 'code', 'deleteDischargeType');

        const headers: HttpHeaders = {
        };

        return this.request<boolean>({
            url: '/dischargetypes/{code}'.replace('{code}', encodeURI(code)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    getDischargeTypes(): Observable<Array<DischargeTypeDTO>>
    getDischargeTypes(opts?: OperationOpts): Observable<AjaxResponse<Array<DischargeTypeDTO>>>
    getDischargeTypes(opts?: OperationOpts): Observable<Array<DischargeTypeDTO> | AjaxResponse<Array<DischargeTypeDTO>>> {
        const headers: HttpHeaders = {
        };

        return this.request<Array<DischargeTypeDTO>>({
            url: '/dischargetypes',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    newDischargeType({ dischargeTypeDTO }: NewDischargeTypeRequest): Observable<DischargeTypeDTO>
    newDischargeType({ dischargeTypeDTO }: NewDischargeTypeRequest, opts?: OperationOpts): Observable<AjaxResponse<DischargeTypeDTO>>
    newDischargeType({ dischargeTypeDTO }: NewDischargeTypeRequest, opts?: OperationOpts): Observable<DischargeTypeDTO | AjaxResponse<DischargeTypeDTO>> {
        throwIfNullOrUndefined(dischargeTypeDTO, 'dischargeTypeDTO', 'newDischargeType');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<DischargeTypeDTO>({
            url: '/dischargetypes',
            method: 'POST',
            headers,
            body: dischargeTypeDTO,
        }, opts?.responseOpts);
    };

    /**
     */
    updateDischargeType({ dischargeTypeDTO }: UpdateDischargeTypeRequest): Observable<DischargeTypeDTO>
    updateDischargeType({ dischargeTypeDTO }: UpdateDischargeTypeRequest, opts?: OperationOpts): Observable<AjaxResponse<DischargeTypeDTO>>
    updateDischargeType({ dischargeTypeDTO }: UpdateDischargeTypeRequest, opts?: OperationOpts): Observable<DischargeTypeDTO | AjaxResponse<DischargeTypeDTO>> {
        throwIfNullOrUndefined(dischargeTypeDTO, 'dischargeTypeDTO', 'updateDischargeType');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<DischargeTypeDTO>({
            url: '/dischargetypes',
            method: 'PUT',
            headers,
            body: dischargeTypeDTO,
        }, opts?.responseOpts);
    };

}
