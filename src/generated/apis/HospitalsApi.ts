// tslint:disable
/**
 * Open Hospital API Documentation
 * Open Hospital API Documentation
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders } from '../runtime';
import type {
    HospitalDTO,
} from '../models';

export interface UpdateHospitalRequest {
    code: string;
    hospitalDTO: HospitalDTO;
}

/**
 * no description
 */
export class HospitalsApi extends BaseAPI {

    /**
     */
    getHospital(): Observable<HospitalDTO>
    getHospital(opts?: OperationOpts): Observable<AjaxResponse<HospitalDTO>>
    getHospital(opts?: OperationOpts): Observable<HospitalDTO | AjaxResponse<HospitalDTO>> {
        const headers: HttpHeaders = {
        };

        return this.request<HospitalDTO>({
            url: '/hospitals',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    getHospitalCurrencyCode(): Observable<string>
    getHospitalCurrencyCode(opts?: OperationOpts): Observable<AjaxResponse<string>>
    getHospitalCurrencyCode(opts?: OperationOpts): Observable<string | AjaxResponse<string>> {
        const headers: HttpHeaders = {
        };

        return this.request<string>({
            url: '/hospitals/currencyCode',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    updateHospital({ code, hospitalDTO }: UpdateHospitalRequest): Observable<HospitalDTO>
    updateHospital({ code, hospitalDTO }: UpdateHospitalRequest, opts?: OperationOpts): Observable<AjaxResponse<HospitalDTO>>
    updateHospital({ code, hospitalDTO }: UpdateHospitalRequest, opts?: OperationOpts): Observable<HospitalDTO | AjaxResponse<HospitalDTO>> {
        throwIfNullOrUndefined(code, 'code', 'updateHospital');
        throwIfNullOrUndefined(hospitalDTO, 'hospitalDTO', 'updateHospital');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<HospitalDTO>({
            url: '/hospitals/{code}'.replace('{code}', encodeURI(code)),
            method: 'PUT',
            headers,
            body: hospitalDTO,
        }, opts?.responseOpts);
    };

}
