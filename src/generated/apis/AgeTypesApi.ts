// tslint:disable
/**
 * Open Hospital API Documentation
 * Open Hospital API Documentation
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    AgeTypeDTO,
} from '../models';

export interface GetAgeTypeByIndexRequest {
    index: number;
}

export interface GetAgeTypeCodeByAgeRequest {
    age: number;
}

export interface UpdateAgeTypeRequest {
    ageTypeDTO: Array<AgeTypeDTO>;
}

/**
 * no description
 */
export class AgeTypesApi extends BaseAPI {

    /**
     */
    getAgeTypeByIndex({ index }: GetAgeTypeByIndexRequest): Observable<AgeTypeDTO>
    getAgeTypeByIndex({ index }: GetAgeTypeByIndexRequest, opts?: OperationOpts): Observable<AjaxResponse<AgeTypeDTO>>
    getAgeTypeByIndex({ index }: GetAgeTypeByIndexRequest, opts?: OperationOpts): Observable<AgeTypeDTO | AjaxResponse<AgeTypeDTO>> {
        throwIfNullOrUndefined(index, 'index', 'getAgeTypeByIndex');

        const headers: HttpHeaders = {
        };

        return this.request<AgeTypeDTO>({
            url: '/agetypes/{index}'.replace('{index}', encodeURI(index)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    getAgeTypeCodeByAge({ age }: GetAgeTypeCodeByAgeRequest): Observable<{ [key: string]: string; }>
    getAgeTypeCodeByAge({ age }: GetAgeTypeCodeByAgeRequest, opts?: OperationOpts): Observable<AjaxResponse<{ [key: string]: string; }>>
    getAgeTypeCodeByAge({ age }: GetAgeTypeCodeByAgeRequest, opts?: OperationOpts): Observable<{ [key: string]: string; } | AjaxResponse<{ [key: string]: string; }>> {
        throwIfNullOrUndefined(age, 'age', 'getAgeTypeCodeByAge');

        const headers: HttpHeaders = {
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'age': age,
        };

        return this.request<{ [key: string]: string; }>({
            url: '/agetypes/code',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    getAllAgeTypes(): Observable<Array<AgeTypeDTO>>
    getAllAgeTypes(opts?: OperationOpts): Observable<AjaxResponse<Array<AgeTypeDTO>>>
    getAllAgeTypes(opts?: OperationOpts): Observable<Array<AgeTypeDTO> | AjaxResponse<Array<AgeTypeDTO>>> {
        const headers: HttpHeaders = {
        };

        return this.request<Array<AgeTypeDTO>>({
            url: '/agetypes',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    updateAgeType({ ageTypeDTO }: UpdateAgeTypeRequest): Observable<Array<AgeTypeDTO>>
    updateAgeType({ ageTypeDTO }: UpdateAgeTypeRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<AgeTypeDTO>>>
    updateAgeType({ ageTypeDTO }: UpdateAgeTypeRequest, opts?: OperationOpts): Observable<Array<AgeTypeDTO> | AjaxResponse<Array<AgeTypeDTO>>> {
        throwIfNullOrUndefined(ageTypeDTO, 'ageTypeDTO', 'updateAgeType');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<Array<AgeTypeDTO>>({
            url: '/agetypes',
            method: 'PUT',
            headers,
            body: ageTypeDTO,
        }, opts?.responseOpts);
    };

}
