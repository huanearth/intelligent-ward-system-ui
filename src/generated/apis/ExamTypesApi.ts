// tslint:disable
/**
 * Open Hospital API Documentation
 * Open Hospital API Documentation
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders } from '../runtime';
import type {
    ExamTypeDTO,
} from '../models';

export interface DeleteExamTypeRequest {
    code: string;
}

export interface NewExamTypeRequest {
    examTypeDTO: ExamTypeDTO;
}

export interface UpdateExamTypeRequest {
    code: string;
    examTypeDTO: ExamTypeDTO;
}

/**
 * no description
 */
export class ExamTypesApi extends BaseAPI {

    /**
     */
    deleteExamType({ code }: DeleteExamTypeRequest): Observable<boolean>
    deleteExamType({ code }: DeleteExamTypeRequest, opts?: OperationOpts): Observable<AjaxResponse<boolean>>
    deleteExamType({ code }: DeleteExamTypeRequest, opts?: OperationOpts): Observable<boolean | AjaxResponse<boolean>> {
        throwIfNullOrUndefined(code, 'code', 'deleteExamType');

        const headers: HttpHeaders = {
        };

        return this.request<boolean>({
            url: '/examtypes/{code}'.replace('{code}', encodeURI(code)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    getExamTypes(): Observable<Array<ExamTypeDTO>>
    getExamTypes(opts?: OperationOpts): Observable<AjaxResponse<Array<ExamTypeDTO>>>
    getExamTypes(opts?: OperationOpts): Observable<Array<ExamTypeDTO> | AjaxResponse<Array<ExamTypeDTO>>> {
        const headers: HttpHeaders = {
        };

        return this.request<Array<ExamTypeDTO>>({
            url: '/examtypes',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    newExamType({ examTypeDTO }: NewExamTypeRequest): Observable<ExamTypeDTO>
    newExamType({ examTypeDTO }: NewExamTypeRequest, opts?: OperationOpts): Observable<AjaxResponse<ExamTypeDTO>>
    newExamType({ examTypeDTO }: NewExamTypeRequest, opts?: OperationOpts): Observable<ExamTypeDTO | AjaxResponse<ExamTypeDTO>> {
        throwIfNullOrUndefined(examTypeDTO, 'examTypeDTO', 'newExamType');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<ExamTypeDTO>({
            url: '/examtypes',
            method: 'POST',
            headers,
            body: examTypeDTO,
        }, opts?.responseOpts);
    };

    /**
     */
    updateExamType({ code, examTypeDTO }: UpdateExamTypeRequest): Observable<ExamTypeDTO>
    updateExamType({ code, examTypeDTO }: UpdateExamTypeRequest, opts?: OperationOpts): Observable<AjaxResponse<ExamTypeDTO>>
    updateExamType({ code, examTypeDTO }: UpdateExamTypeRequest, opts?: OperationOpts): Observable<ExamTypeDTO | AjaxResponse<ExamTypeDTO>> {
        throwIfNullOrUndefined(code, 'code', 'updateExamType');
        throwIfNullOrUndefined(examTypeDTO, 'examTypeDTO', 'updateExamType');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<ExamTypeDTO>({
            url: '/examtypes/{code}'.replace('{code}', encodeURI(code)),
            method: 'PUT',
            headers,
            body: examTypeDTO,
        }, opts?.responseOpts);
    };

}
